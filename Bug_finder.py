# coding=utf-8from __future__ import absolute_import, print_functionimport argparseimport torchfrom torch.backends import cudnnfrom evaluations import extract_features, pairwise_distance, pairwise_similarityfrom evaluations import Recall_at_ks, Recall_at_ks_products, Recall_at_ks_shopimport modelsimport DataSetimport osimport numpy as npcudnn.benchmark = Trueos.environ["CUDA_VISIBLE_DEVICES"] = "0"im1 = '/opt/intern/users/xunwang/jd-comp/images/P/img/jfs/t18085/239/1572160811/242071/9e3b6d97/5ad06c21Nd73ffab7.jpg'im2 = '/opt/intern/users/xunwang/jd-comp/images/P/img/jfs/t17857/121/1655327696/242539/1771960e/5ad06c69N5b34d078.jpg'from PIL import Imageim1 = Image.open(im1)im2 = Image.open(im2)im1.save('1.jpg')im2.save('2.jpg')r = '/opt/intern/users/xunwang/checkpoints/bin/jd/512-BN-alpha40/135_model.pth'PATH = rmodel = models.create('vgg', dim=512, pretrained=False)model = torch.nn.DataParallel(model)model.load_state_dict(torch.load(PATH))model = model.cuda()data = DataSet.create('jd')data_loader = torch.utils.data.DataLoader(    data.gallery, batch_size=64, shuffle=False, drop_last=False)features, labels = extract_features(model, data_loader, print_freq=5, metric=None)sim_mat = -pairwise_distance(features)result = Recall_at_ks(sim_mat, query_ids=labels, gallery_ids=labels)for i, l in enumerate(sim_mat):    if np.isnan(l.mean()):        print(i)for i, k in enumerate(l):    if np.isnan(k):        print(i)f1 = features[2491]f2 = features[3767]print(torch.mean(f1))print(torch.mean(f2))